
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d38  08003d38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004010  20000010  08003d50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004020  08003d50  00024020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dc4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000261f  00000000  00000000  00030e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef0  00000000  00000000  00033428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00034318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ea9  00000000  00000000  000350e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb56  00000000  00000000  00058f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dda59  00000000  00000000  00064adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142538  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d64  00000000  00000000  001425b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003c80 	.word	0x08003c80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08003c80 	.word	0x08003c80

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4a07      	ldr	r2, [pc, #28]	; (800051c <vApplicationGetIdleTaskMemory+0x2c>)
 8000500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <vApplicationGetIdleTaskMemory+0x30>)
 8000506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	2000002c 	.word	0x2000002c
 8000520:	20000080 	.word	0x20000080

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b096      	sub	sp, #88	; 0x58
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fa3d 	bl	80009a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f853 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8bb 	bl	80006ac <MX_GPIO_Init>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  q = xQueueCreate(5 , sizeof( int16_t ) );
 8000536:	2200      	movs	r2, #0
 8000538:	2102      	movs	r1, #2
 800053a:	2005      	movs	r0, #5
 800053c:	f001 fd8c 	bl	8002058 <xQueueGenericCreate>
 8000540:	4602      	mov	r2, r0
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <main+0x98>)
 8000544:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <main+0x9c>)
 8000548:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800054c:	461d      	mov	r5, r3
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fbfc 	bl	8001d5e <osThreadCreate>
 8000566:	4602      	mov	r2, r0
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <main+0xa0>)
 800056a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <main+0xa4>)
 800056e:	f107 0420 	add.w	r4, r7, #32
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fbe9 	bl	8001d5e <osThreadCreate>
 800058c:	4602      	mov	r2, r0
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0xa8>)
 8000590:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <main+0xac>)
 8000594:	1d3c      	adds	r4, r7, #4
 8000596:	461d      	mov	r5, r3
 8000598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fbd8 	bl	8001d5e <osThreadCreate>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <main+0xb0>)
 80005b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f001 fbcc 	bl	8001d50 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x94>
 80005ba:	bf00      	nop
 80005bc:	20003fd8 	.word	0x20003fd8
 80005c0:	08003ca4 	.word	0x08003ca4
 80005c4:	20003fcc 	.word	0x20003fcc
 80005c8:	08003ccc 	.word	0x08003ccc
 80005cc:	20003fd0 	.word	0x20003fd0
 80005d0:	08003cf4 	.word	0x08003cf4
 80005d4:	20003fd4 	.word	0x20003fd4

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fb41 	bl	8003c6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <SystemClock_Config+0xd0>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800064c:	230c      	movs	r3, #12
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000650:	2332      	movs	r3, #50	; 0x32
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fcc5 	bl	8000ff0 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 f8ac 	bl	80007c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2101      	movs	r1, #1
 800068c:	4618      	mov	r0, r3
 800068e:	f000 ff1f 	bl	80014d0 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000698:	f000 f896 	bl	80007c8 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_GPIO_Init+0x80>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_GPIO_Init+0x80>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_GPIO_Init+0x80>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_GPIO_Init+0x80>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <MX_GPIO_Init+0x80>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_GPIO_Init+0x80>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <MX_GPIO_Init+0x84>)
 8000702:	f000 fc41 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000706:	f244 0381 	movw	r3, #16513	; 0x4081
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4619      	mov	r1, r3
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_GPIO_Init+0x84>)
 8000720:	f000 fa88 	bl	8000c34 <HAL_GPIO_Init>

}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40020400 	.word	0x40020400

08000734 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f001 fb5a 	bl	8001df6 <osDelay>
 8000742:	e7fb      	b.n	800073c <StartDefaultTask+0x8>

08000744 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  int16_t SendNum = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	81fb      	strh	r3, [r7, #14]
  for(;;)
  {
	xQueueSend(q, ( void* )&SendNum, portMAX_DELAY);
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <StartTask02+0x28>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	f107 010e 	add.w	r1, r7, #14
 8000758:	2300      	movs	r3, #0
 800075a:	f04f 32ff 	mov.w	r2, #4294967295
 800075e:	f001 fcd9 	bl	8002114 <xQueueGenericSend>
	HAL_Delay(1000);
 8000762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000766:	f000 f961 	bl	8000a2c <HAL_Delay>
	xQueueSend(q, ( void* )&SendNum, portMAX_DELAY);
 800076a:	e7f1      	b.n	8000750 <StartTask02+0xc>
 800076c:	20003fd8 	.word	0x20003fd8

08000770 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  int16_t rec;
  for(;;)
  {
	  if ( xQueueReceive(q,&(rec),portMAX_DELAY) == pdPASS)
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <StartTask03+0x2c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f107 010e 	add.w	r1, r7, #14
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fdbf 	bl	8002308 <xQueueReceive>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d1f3      	bne.n	8000778 <StartTask03+0x8>
	  {
//		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <StartTask03+0x30>)
 8000794:	f000 fc11 	bl	8000fba <HAL_GPIO_TogglePin>
	  if ( xQueueReceive(q,&(rec),portMAX_DELAY) == pdPASS)
 8000798:	e7ee      	b.n	8000778 <StartTask03+0x8>
 800079a:	bf00      	nop
 800079c:	20003fd8 	.word	0x20003fd8
 80007a0:	40020400 	.word	0x40020400

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f919 	bl	80009ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40010000 	.word	0x40010000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <HAL_MspInit+0x54>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_MspInit+0x54>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	f06f 0001 	mvn.w	r0, #1
 800081e:	f000 f9df 	bl	8000be0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	2019      	movs	r0, #25
 8000846:	f000 f9cb 	bl	8000be0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800084a:	2019      	movs	r0, #25
 800084c:	f000 f9e4 	bl	8000c18 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <HAL_InitTick+0xa0>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000858:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <HAL_InitTick+0xa0>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6453      	str	r3, [r2, #68]	; 0x44
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_InitTick+0xa0>)
 8000862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086c:	f107 0210 	add.w	r2, r7, #16
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f000 ffe2 	bl	8001840 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800087c:	f000 ffcc 	bl	8001818 <HAL_RCC_GetPCLK2Freq>
 8000880:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_InitTick+0xa4>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	0c9b      	lsrs	r3, r3, #18
 800088c:	3b01      	subs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_InitTick+0xa8>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <HAL_InitTick+0xac>)
 8000894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_InitTick+0xa8>)
 8000898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800089c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_InitTick+0xa8>)
 80008a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_InitTick+0xa8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_InitTick+0xa8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <HAL_InitTick+0xa8>)
 80008b2:	f000 fff7 	bl	80018a4 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <HAL_InitTick+0xa8>)
 80008be:	f001 f826 	bl	800190e <HAL_TIM_Base_Start_IT>
 80008c2:	4603      	mov	r3, r0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3730      	adds	r7, #48	; 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	431bde83 	.word	0x431bde83
 80008d8:	20003fdc 	.word	0x20003fdc
 80008dc:	40010000 	.word	0x40010000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800091a:	f001 f81c 	bl	8001956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20003fdc 	.word	0x20003fdc

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <SystemInit+0x28>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <SystemInit+0x28>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SystemInit+0x28>)
 800093e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000942:	609a      	str	r2, [r3, #8]
#endif
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000958:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800095a:	e003      	b.n	8000964 <LoopCopyDataInit>

0800095c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800095e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000960:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000962:	3104      	adds	r1, #4

08000964 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000968:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800096c:	d3f6      	bcc.n	800095c <CopyDataInit>
  ldr  r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000970:	e002      	b.n	8000978 <LoopFillZerobss>

08000972 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000972:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000974:	f842 3b04 	str.w	r3, [r2], #4

08000978 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800097a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800097c:	d3f9      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800097e:	f7ff ffd3 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f003 f945 	bl	8003c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f7ff fdcd 	bl	8000524 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800098c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000990:	08003d40 	.word	0x08003d40
  ldr  r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000998:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800099c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80009a0:	20004020 	.word	0x20004020

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <HAL_Init+0x40>)
 80009b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_Init+0x40>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <HAL_Init+0x40>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f8fa 	bl	8000bca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff ff2a 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009dc:	f7ff fefc 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023c00 	.word	0x40023c00

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	2000401c 	.word	0x2000401c

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2000401c 	.word	0x2000401c

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff ffee 	bl	8000a14 <HAL_GetTick>
 8000a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d005      	beq.n	8000a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_Delay+0x40>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a52:	bf00      	nop
 8000a54:	f7ff ffde 	bl	8000a14 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8f7      	bhi.n	8000a54 <HAL_Delay+0x28>
  {
  }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0b      	blt.n	8000afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <__NVIC_EnableIRQ+0x38>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff4c 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf2:	f7ff ff61 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000bf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	6978      	ldr	r0, [r7, #20]
 8000bfe:	f7ff ffb1 	bl	8000b64 <NVIC_EncodePriority>
 8000c02:	4602      	mov	r2, r0
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff80 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff54 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	e177      	b.n	8000f40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f040 8166 	bne.w	8000f3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d00b      	beq.n	8000c8e <HAL_GPIO_Init+0x5a>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d007      	beq.n	8000c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c82:	2b11      	cmp	r3, #17
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b12      	cmp	r3, #18
 8000c8c:	d130      	bne.n	8000cf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 0201 	and.w	r2, r3, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0xfc>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b12      	cmp	r3, #18
 8000d2e:	d123      	bne.n	8000d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	69b9      	ldr	r1, [r7, #24]
 8000d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0203 	and.w	r2, r3, #3
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80c0 	beq.w	8000f3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b65      	ldr	r3, [pc, #404]	; (8000f54 <HAL_GPIO_Init+0x320>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a64      	ldr	r2, [pc, #400]	; (8000f54 <HAL_GPIO_Init+0x320>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <HAL_GPIO_Init+0x320>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd6:	4a60      	ldr	r2, [pc, #384]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a57      	ldr	r2, [pc, #348]	; (8000f5c <HAL_GPIO_Init+0x328>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d037      	beq.n	8000e72 <HAL_GPIO_Init+0x23e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a56      	ldr	r2, [pc, #344]	; (8000f60 <HAL_GPIO_Init+0x32c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d031      	beq.n	8000e6e <HAL_GPIO_Init+0x23a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a55      	ldr	r2, [pc, #340]	; (8000f64 <HAL_GPIO_Init+0x330>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02b      	beq.n	8000e6a <HAL_GPIO_Init+0x236>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a54      	ldr	r2, [pc, #336]	; (8000f68 <HAL_GPIO_Init+0x334>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d025      	beq.n	8000e66 <HAL_GPIO_Init+0x232>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a53      	ldr	r2, [pc, #332]	; (8000f6c <HAL_GPIO_Init+0x338>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d01f      	beq.n	8000e62 <HAL_GPIO_Init+0x22e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a52      	ldr	r2, [pc, #328]	; (8000f70 <HAL_GPIO_Init+0x33c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d019      	beq.n	8000e5e <HAL_GPIO_Init+0x22a>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a51      	ldr	r2, [pc, #324]	; (8000f74 <HAL_GPIO_Init+0x340>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0x226>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a50      	ldr	r2, [pc, #320]	; (8000f78 <HAL_GPIO_Init+0x344>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d00d      	beq.n	8000e56 <HAL_GPIO_Init+0x222>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	; (8000f7c <HAL_GPIO_Init+0x348>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d007      	beq.n	8000e52 <HAL_GPIO_Init+0x21e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4e      	ldr	r2, [pc, #312]	; (8000f80 <HAL_GPIO_Init+0x34c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_GPIO_Init+0x21a>
 8000e4a:	2309      	movs	r3, #9
 8000e4c:	e012      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e4e:	230a      	movs	r3, #10
 8000e50:	e010      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e52:	2308      	movs	r3, #8
 8000e54:	e00e      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e56:	2307      	movs	r3, #7
 8000e58:	e00c      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e00a      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e5e:	2305      	movs	r3, #5
 8000e60:	e008      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e62:	2304      	movs	r3, #4
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e004      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x240>
 8000e72:	2300      	movs	r3, #0
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	f002 0203 	and.w	r2, r2, #3
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	4093      	lsls	r3, r2
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e84:	4934      	ldr	r1, [pc, #208]	; (8000f58 <HAL_GPIO_Init+0x324>)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e92:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb6:	4a33      	ldr	r2, [pc, #204]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ebc:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee0:	4a28      	ldr	r2, [pc, #160]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_GPIO_Init+0x350>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	f67f ae84 	bls.w	8000c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3724      	adds	r7, #36	; 0x24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40021400 	.word	0x40021400
 8000f74:	40021800 	.word	0x40021800
 8000f78:	40021c00 	.word	0x40021c00
 8000f7c:	40022000 	.word	0x40022000
 8000f80:	40022400 	.word	0x40022400
 8000f84:	40013c00 	.word	0x40013c00

08000f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f98:	787b      	ldrb	r3, [r7, #1]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa4:	e003      	b.n	8000fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	041a      	lsls	r2, r3, #16
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	401a      	ands	r2, r3
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d104      	bne.n	8000fde <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	041a      	lsls	r2, r3, #16
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e25b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d075      	beq.n	80010fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100e:	4ba3      	ldr	r3, [pc, #652]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b04      	cmp	r3, #4
 8001018:	d00c      	beq.n	8001034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001022:	2b08      	cmp	r3, #8
 8001024:	d112      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001026:	4b9d      	ldr	r3, [pc, #628]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001032:	d10b      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	4b99      	ldr	r3, [pc, #612]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d05b      	beq.n	80010f8 <HAL_RCC_OscConfig+0x108>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d157      	bne.n	80010f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e236      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d106      	bne.n	8001064 <HAL_RCC_OscConfig+0x74>
 8001056:	4b91      	ldr	r3, [pc, #580]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a90      	ldr	r2, [pc, #576]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800105c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e01d      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x98>
 800106e:	4b8b      	ldr	r3, [pc, #556]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a8a      	ldr	r2, [pc, #552]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a87      	ldr	r2, [pc, #540]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001088:	4b84      	ldr	r3, [pc, #528]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a83      	ldr	r2, [pc, #524]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800108e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a80      	ldr	r2, [pc, #512]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fcb4 	bl	8000a14 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fcb0 	bl	8000a14 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e1fb      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	4b76      	ldr	r3, [pc, #472]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0xc0>
 80010ce:	e014      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fca0 	bl	8000a14 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fc9c 	bl	8000a14 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e1e7      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	4b6c      	ldr	r3, [pc, #432]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0xe8>
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d063      	beq.n	80011ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	4b65      	ldr	r3, [pc, #404]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001112:	4b62      	ldr	r3, [pc, #392]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d11c      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111e:	4b5f      	ldr	r3, [pc, #380]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d116      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d001      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e1bb      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001142:	4b56      	ldr	r3, [pc, #344]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4952      	ldr	r1, [pc, #328]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	e03a      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001160:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_RCC_OscConfig+0x2b0>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fc55 	bl	8000a14 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fc51 	bl	8000a14 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e19c      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b43      	ldr	r3, [pc, #268]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4940      	ldr	r1, [pc, #256]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <HAL_RCC_OscConfig+0x2b0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc34 	bl	8000a14 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc30 	bl	8000a14 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e17b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d030      	beq.n	800123c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d016      	beq.n	8001210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_RCC_OscConfig+0x2b4>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fc14 	bl	8000a14 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc10 	bl	8000a14 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e15b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x200>
 800120e:	e015      	b.n	800123c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_OscConfig+0x2b4>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fbfd 	bl	8000a14 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff fbf9 	bl	8000a14 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e144      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a0 	beq.w	800138a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001276:	2301      	movs	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d121      	bne.n	80012ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001292:	f7ff fbbf 	bl	8000a14 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	e011      	b.n	80012be <HAL_RCC_OscConfig+0x2ce>
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	42470000 	.word	0x42470000
 80012a4:	42470e80 	.word	0x42470e80
 80012a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ac:	f7ff fbb2 	bl	8000a14 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e0fd      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
 80012d2:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d6:	4a7c      	ldr	r2, [pc, #496]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6713      	str	r3, [r2, #112]	; 0x70
 80012de:	e01c      	b.n	800131a <HAL_RCC_OscConfig+0x32a>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d10c      	bne.n	8001302 <HAL_RCC_OscConfig+0x312>
 80012e8:	4b77      	ldr	r3, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a76      	ldr	r2, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a73      	ldr	r2, [pc, #460]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001300:	e00b      	b.n	800131a <HAL_RCC_OscConfig+0x32a>
 8001302:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001306:	4a70      	ldr	r2, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6713      	str	r3, [r2, #112]	; 0x70
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	4a6d      	ldr	r2, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d015      	beq.n	800134e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001322:	f7ff fb77 	bl	8000a14 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f7ff fb73 	bl	8000a14 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f241 3288 	movw	r2, #5000	; 0x1388
 8001338:	4293      	cmp	r3, r2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0bc      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0ee      	beq.n	800132a <HAL_RCC_OscConfig+0x33a>
 800134c:	e014      	b.n	8001378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fb61 	bl	8000a14 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff fb5d 	bl	8000a14 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f241 3288 	movw	r2, #5000	; 0x1388
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0a6      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ee      	bne.n	8001356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d105      	bne.n	800138a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a51      	ldr	r2, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8092 	beq.w	80014b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001394:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d05c      	beq.n	800145a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d141      	bne.n	800142c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a8:	4b48      	ldr	r3, [pc, #288]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb31 	bl	8000a14 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff fb2d 	bl	8000a14 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e078      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c8:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69da      	ldr	r2, [r3, #28]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	019b      	lsls	r3, r3, #6
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	061b      	lsls	r3, r3, #24
 80013f8:	4933      	ldr	r1, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fb06 	bl	8000a14 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fb02 	bl	8000a14 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e04d      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x41c>
 800142a:	e045      	b.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff faef 	bl	8000a14 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff faeb 	bl	8000a14 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e036      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x44a>
 8001458:	e02e      	b.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e029      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	429a      	cmp	r2, r3
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d115      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800148e:	4013      	ands	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001494:	4293      	cmp	r3, r2
 8001496:	d10d      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470060 	.word	0x42470060

080014d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0cc      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d90c      	bls.n	800150c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0b8      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001524:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800152e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a52      	ldr	r2, [pc, #328]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	494d      	ldr	r1, [pc, #308]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d044      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d119      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e07f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	2b03      	cmp	r3, #3
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e067      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4934      	ldr	r1, [pc, #208]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c0:	f7ff fa28 	bl	8000a14 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	e00a      	b.n	80015de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff fa24 	bl	8000a14 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e04f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 020c 	and.w	r2, r3, #12
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1eb      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d20c      	bcs.n	8001618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e032      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4916      	ldr	r1, [pc, #88]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	490e      	ldr	r1, [pc, #56]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001656:	f000 f821 	bl	800169c <HAL_RCC_GetSysClockFreq>
 800165a:	4601      	mov	r1, r0
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	fa21 f303 	lsr.w	r3, r1, r3
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f8da 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00
 800168c:	40023800 	.word	0x40023800
 8001690:	08003d18 	.word	0x08003d18
 8001694:	20000000 	.word	0x20000000
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b2:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d007      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0x32>
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d008      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x38>
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 808d 	bne.w	80017e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b4b      	ldr	r3, [pc, #300]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016ca:	60bb      	str	r3, [r7, #8]
       break;
 80016cc:	e08c      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ce:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 80016d0:	60bb      	str	r3, [r7, #8]
      break;
 80016d2:	e089      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016de:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d023      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ea:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	ea03 0501 	and.w	r5, r3, r1
 8001700:	ea04 0602 	and.w	r6, r4, r2
 8001704:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001706:	fb02 f106 	mul.w	r1, r2, r6
 800170a:	2200      	movs	r2, #0
 800170c:	fb02 f205 	mul.w	r2, r2, r5
 8001710:	440a      	add	r2, r1
 8001712:	493a      	ldr	r1, [pc, #232]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001714:	fba5 0101 	umull	r0, r1, r5, r1
 8001718:	1853      	adds	r3, r2, r1
 800171a:	4619      	mov	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f04f 0400 	mov.w	r4, #0
 8001722:	461a      	mov	r2, r3
 8001724:	4623      	mov	r3, r4
 8001726:	f7fe fd63 	bl	80001f0 <__aeabi_uldivmod>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e049      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	099b      	lsrs	r3, r3, #6
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	ea03 0501 	and.w	r5, r3, r1
 8001748:	ea04 0602 	and.w	r6, r4, r2
 800174c:	4629      	mov	r1, r5
 800174e:	4632      	mov	r2, r6
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	0154      	lsls	r4, r2, #5
 800175a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	4619      	mov	r1, r3
 8001762:	4622      	mov	r2, r4
 8001764:	1b49      	subs	r1, r1, r5
 8001766:	eb62 0206 	sbc.w	r2, r2, r6
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0194      	lsls	r4, r2, #6
 8001774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	1a5b      	subs	r3, r3, r1
 800177c:	eb64 0402 	sbc.w	r4, r4, r2
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	00e2      	lsls	r2, r4, #3
 800178a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	195b      	adds	r3, r3, r5
 8001796:	eb44 0406 	adc.w	r4, r4, r6
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	02a2      	lsls	r2, r4, #10
 80017a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017a8:	0299      	lsls	r1, r3, #10
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7fe fd18 	bl	80001f0 <__aeabi_uldivmod>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	3301      	adds	r3, #1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	60bb      	str	r3, [r7, #8]
      break;
 80017e0:	e002      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017e4:	60bb      	str	r3, [r7, #8]
      break;
 80017e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e8:	68bb      	ldr	r3, [r7, #8]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	00f42400 	.word	0x00f42400
 80017fc:	017d7840 	.word	0x017d7840

08001800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_RCC_GetHCLKFreq+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800181c:	f7ff fff0 	bl	8001800 <HAL_RCC_GetHCLKFreq>
 8001820:	4601      	mov	r1, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0b5b      	lsrs	r3, r3, #13
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_RCC_GetPCLK2Freq+0x24>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	08003d28 	.word	0x08003d28

08001840 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	220f      	movs	r2, #15
 800184e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_RCC_GetClockConfig+0x60>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 020f 	and.w	r2, r3, #15
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e01d      	b.n	80018f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f815 	bl	80018fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3304      	adds	r3, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f000 f968 	bl	8001bb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b06      	cmp	r3, #6
 8001936:	d007      	beq.n	8001948 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b02      	cmp	r3, #2
 800196a:	d122      	bne.n	80019b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d11b      	bne.n	80019b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f06f 0202 	mvn.w	r2, #2
 8001982:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f8ee 	bl	8001b7a <HAL_TIM_IC_CaptureCallback>
 800199e:	e005      	b.n	80019ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f8e0 	bl	8001b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8f1 	bl	8001b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d122      	bne.n	8001a06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d11b      	bne.n	8001a06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f06f 0204 	mvn.w	r2, #4
 80019d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f8c4 	bl	8001b7a <HAL_TIM_IC_CaptureCallback>
 80019f2:	e005      	b.n	8001a00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f8b6 	bl	8001b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f8c7 	bl	8001b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d122      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d11b      	bne.n	8001a5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f06f 0208 	mvn.w	r2, #8
 8001a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f89a 	bl	8001b7a <HAL_TIM_IC_CaptureCallback>
 8001a46:	e005      	b.n	8001a54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f88c 	bl	8001b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f89d 	bl	8001b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d122      	bne.n	8001aae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d11b      	bne.n	8001aae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0210 	mvn.w	r2, #16
 8001a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2208      	movs	r2, #8
 8001a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f870 	bl	8001b7a <HAL_TIM_IC_CaptureCallback>
 8001a9a:	e005      	b.n	8001aa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f862 	bl	8001b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f873 	bl	8001b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d10e      	bne.n	8001ada <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f06f 0201 	mvn.w	r2, #1
 8001ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7fe fe65 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae4:	2b80      	cmp	r3, #128	; 0x80
 8001ae6:	d10e      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	2b80      	cmp	r3, #128	; 0x80
 8001af4:	d107      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f903 	bl	8001d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b10:	2b40      	cmp	r3, #64	; 0x40
 8001b12:	d10e      	bne.n	8001b32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	2b40      	cmp	r3, #64	; 0x40
 8001b20:	d107      	bne.n	8001b32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f838 	bl	8001ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d10e      	bne.n	8001b5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d107      	bne.n	8001b5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0220 	mvn.w	r2, #32
 8001b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8cd 	bl	8001cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a40      	ldr	r2, [pc, #256]	; (8001ccc <TIM_Base_SetConfig+0x114>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d013      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd6:	d00f      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a3d      	ldr	r2, [pc, #244]	; (8001cd0 <TIM_Base_SetConfig+0x118>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00b      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <TIM_Base_SetConfig+0x11c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d007      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3b      	ldr	r2, [pc, #236]	; (8001cd8 <TIM_Base_SetConfig+0x120>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <TIM_Base_SetConfig+0x40>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <TIM_Base_SetConfig+0x124>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d108      	bne.n	8001c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <TIM_Base_SetConfig+0x114>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d02b      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c18:	d027      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a2c      	ldr	r2, [pc, #176]	; (8001cd0 <TIM_Base_SetConfig+0x118>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d023      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <TIM_Base_SetConfig+0x11c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <TIM_Base_SetConfig+0x120>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01b      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <TIM_Base_SetConfig+0x124>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d017      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a28      	ldr	r2, [pc, #160]	; (8001ce0 <TIM_Base_SetConfig+0x128>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <TIM_Base_SetConfig+0x12c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00f      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a26      	ldr	r2, [pc, #152]	; (8001ce8 <TIM_Base_SetConfig+0x130>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00b      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a25      	ldr	r2, [pc, #148]	; (8001cec <TIM_Base_SetConfig+0x134>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <TIM_Base_SetConfig+0x138>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d003      	beq.n	8001c6a <TIM_Base_SetConfig+0xb2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <TIM_Base_SetConfig+0x13c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d108      	bne.n	8001c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <TIM_Base_SetConfig+0x114>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d003      	beq.n	8001cb0 <TIM_Base_SetConfig+0xf8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <TIM_Base_SetConfig+0x124>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d103      	bne.n	8001cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	615a      	str	r2, [r3, #20]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40010000 	.word	0x40010000
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	40000c00 	.word	0x40000c00
 8001cdc:	40010400 	.word	0x40010400
 8001ce0:	40014000 	.word	0x40014000
 8001ce4:	40014400 	.word	0x40014400
 8001ce8:	40014800 	.word	0x40014800
 8001cec:	40001800 	.word	0x40001800
 8001cf0:	40001c00 	.word	0x40001c00
 8001cf4:	40002000 	.word	0x40002000

08001cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d32:	2b84      	cmp	r3, #132	; 0x84
 8001d34:	d005      	beq.n	8001d42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001d36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3303      	adds	r3, #3
 8001d40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001d54:	f000 fe88 	bl	8002a68 <vTaskStartScheduler>
  
  return osOK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d60:	b089      	sub	sp, #36	; 0x24
 8001d62:	af04      	add	r7, sp, #16
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <osThreadCreate+0x54>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01c      	beq.n	8001db2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685c      	ldr	r4, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681d      	ldr	r5, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691e      	ldr	r6, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ffc8 	bl	8001d20 <makeFreeRtosPriority>
 8001d90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d9a:	9202      	str	r2, [sp, #8]
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	9100      	str	r1, [sp, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4632      	mov	r2, r6
 8001da4:	4629      	mov	r1, r5
 8001da6:	4620      	mov	r0, r4
 8001da8:	f000 fc9a 	bl	80026e0 <xTaskCreateStatic>
 8001dac:	4603      	mov	r3, r0
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	e01c      	b.n	8001dec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685c      	ldr	r4, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dbe:	b29e      	uxth	r6, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ffaa 	bl	8001d20 <makeFreeRtosPriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	9200      	str	r2, [sp, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4632      	mov	r2, r6
 8001dda:	4629      	mov	r1, r5
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f000 fcd9 	bl	8002794 <xTaskCreate>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d001      	beq.n	8001dec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <osDelay+0x16>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	e000      	b.n	8001e0e <osDelay+0x18>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fdf6 	bl	8002a00 <vTaskDelay>
  
  return osOK;
 8001e14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f103 0208 	add.w	r2, r3, #8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f04f 32ff 	mov.w	r2, #4294967295
 8001e36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f103 0208 	add.w	r2, r3, #8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f103 0208 	add.w	r2, r3, #8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed6:	d103      	bne.n	8001ee0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e00c      	b.n	8001efa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	e002      	b.n	8001eee <vListInsert+0x2e>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d2f6      	bcs.n	8001ee8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6892      	ldr	r2, [r2, #8]
 8001f48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6852      	ldr	r2, [r2, #4]
 8001f52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d103      	bne.n	8001f66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	1e5a      	subs	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa0:	f383 8811 	msr	BASEPRI, r3
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	e7fe      	b.n	8001fae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001fb0:	f001 fb7c 	bl	80036ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	441a      	add	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	68f9      	ldr	r1, [r7, #12]
 8001fe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	441a      	add	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	22ff      	movs	r2, #255	; 0xff
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d114      	bne.n	8002030 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01a      	beq.n	8002044 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3310      	adds	r3, #16
 8002012:	4618      	mov	r0, r3
 8002014:	f000 ff66 	bl	8002ee4 <xTaskRemoveFromEventList>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d012      	beq.n	8002044 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <xQueueGenericReset+0xcc>)
 8002020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f3bf 8f4f 	dsb	sy
 800202a:	f3bf 8f6f 	isb	sy
 800202e:	e009      	b.n	8002044 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3310      	adds	r3, #16
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fef2 	bl	8001e1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3324      	adds	r3, #36	; 0x24
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff feed 	bl	8001e1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002044:	f001 fb60 	bl	8003708 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002048:	2301      	movs	r3, #1
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000ed04 	.word	0xe000ed04

08002058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	4613      	mov	r3, r2
 8002064:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <xQueueGenericCreate+0x28>
 800206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e7fe      	b.n	800207e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	e004      	b.n	8002096 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3348      	adds	r3, #72	; 0x48
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fbe2 	bl	8003864 <pvPortMalloc>
 80020a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d011      	beq.n	80020cc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3348      	adds	r3, #72	; 0x48
 80020b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020ba:	79fa      	ldrb	r2, [r7, #7]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f805 	bl	80020d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80020cc:	69bb      	ldr	r3, [r7, #24]
	}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e002      	b.n	80020f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002104:	2101      	movs	r1, #1
 8002106:	69b8      	ldr	r0, [r7, #24]
 8002108:	f7ff ff3e 	bl	8001f88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08e      	sub	sp, #56	; 0x38
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <xQueueGenericSend+0x30>
 8002130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002134:	f383 8811 	msr	BASEPRI, r3
 8002138:	f3bf 8f6f 	isb	sy
 800213c:	f3bf 8f4f 	dsb	sy
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
 8002142:	e7fe      	b.n	8002142 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <xQueueGenericSend+0x3e>
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <xQueueGenericSend+0x42>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <xQueueGenericSend+0x44>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <xQueueGenericSend+0x5c>
 800215c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002160:	f383 8811 	msr	BASEPRI, r3
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	f3bf 8f4f 	dsb	sy
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
 800216e:	e7fe      	b.n	800216e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d103      	bne.n	800217e <xQueueGenericSend+0x6a>
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <xQueueGenericSend+0x6e>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <xQueueGenericSend+0x70>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <xQueueGenericSend+0x88>
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	e7fe      	b.n	800219a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800219c:	f001 f858 	bl	8003250 <xTaskGetSchedulerState>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <xQueueGenericSend+0x98>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <xQueueGenericSend+0x9c>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <xQueueGenericSend+0x9e>
 80021b0:	2300      	movs	r3, #0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <xQueueGenericSend+0xb6>
 80021b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	e7fe      	b.n	80021c8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021ca:	f001 fa6f 	bl	80036ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <xQueueGenericSend+0xcc>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d129      	bne.n	8002234 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021e6:	f000 f96b 	bl	80024c0 <prvCopyDataToQueue>
 80021ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d010      	beq.n	8002216 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	3324      	adds	r3, #36	; 0x24
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fe73 	bl	8002ee4 <xTaskRemoveFromEventList>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002204:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <xQueueGenericSend+0x1f0>)
 8002206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	f3bf 8f6f 	isb	sy
 8002214:	e00a      	b.n	800222c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800221c:	4b39      	ldr	r3, [pc, #228]	; (8002304 <xQueueGenericSend+0x1f0>)
 800221e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800222c:	f001 fa6c 	bl	8003708 <vPortExitCritical>
				return pdPASS;
 8002230:	2301      	movs	r3, #1
 8002232:	e063      	b.n	80022fc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800223a:	f001 fa65 	bl	8003708 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800223e:	2300      	movs	r3, #0
 8002240:	e05c      	b.n	80022fc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002244:	2b00      	cmp	r3, #0
 8002246:	d106      	bne.n	8002256 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4618      	mov	r0, r3
 800224e:	f000 feab 	bl	8002fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002252:	2301      	movs	r3, #1
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002256:	f001 fa57 	bl	8003708 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800225a:	f000 fc63 	bl	8002b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800225e:	f001 fa25 	bl	80036ac <vPortEnterCritical>
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002268:	b25b      	sxtb	r3, r3
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d103      	bne.n	8002278 <xQueueGenericSend+0x164>
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800227e:	b25b      	sxtb	r3, r3
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d103      	bne.n	800228e <xQueueGenericSend+0x17a>
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800228e:	f001 fa3b 	bl	8003708 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002292:	1d3a      	adds	r2, r7, #4
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fe9a 	bl	8002fd4 <xTaskCheckForTimeOut>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d124      	bne.n	80022f0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022a8:	f000 fa02 	bl	80026b0 <prvIsQueueFull>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d018      	beq.n	80022e4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	3310      	adds	r3, #16
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fdee 	bl	8002e9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022c2:	f000 f98d 	bl	80025e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022c6:	f000 fc3b 	bl	8002b40 <xTaskResumeAll>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f af7c 	bne.w	80021ca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <xQueueGenericSend+0x1f0>)
 80022d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	e772      	b.n	80021ca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022e6:	f000 f97b 	bl	80025e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022ea:	f000 fc29 	bl	8002b40 <xTaskResumeAll>
 80022ee:	e76c      	b.n	80021ca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022f2:	f000 f975 	bl	80025e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022f6:	f000 fc23 	bl	8002b40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3738      	adds	r7, #56	; 0x38
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	e000ed04 	.word	0xe000ed04

08002308 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	; 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <xQueueReceive+0x2e>
 8002322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002326:	f383 8811 	msr	BASEPRI, r3
 800232a:	f3bf 8f6f 	isb	sy
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	e7fe      	b.n	8002334 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <xQueueReceive+0x3c>
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <xQueueReceive+0x40>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <xQueueReceive+0x42>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <xQueueReceive+0x5a>
 800234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	e7fe      	b.n	8002360 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002362:	f000 ff75 	bl	8003250 <xTaskGetSchedulerState>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <xQueueReceive+0x6a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <xQueueReceive+0x6e>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <xQueueReceive+0x70>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <xQueueReceive+0x88>
 800237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e7fe      	b.n	800238e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002390:	f001 f98c 	bl	80036ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01f      	beq.n	80023e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a4:	f000 f8f6 	bl	8002594 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00f      	beq.n	80023d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	3310      	adds	r3, #16
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fd91 	bl	8002ee4 <xTaskRemoveFromEventList>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <xQueueReceive+0x1b4>)
 80023ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023d8:	f001 f996 	bl	8003708 <vPortExitCritical>
				return pdPASS;
 80023dc:	2301      	movs	r3, #1
 80023de:	e069      	b.n	80024b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d103      	bne.n	80023ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023e6:	f001 f98f 	bl	8003708 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e062      	b.n	80024b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fdd5 	bl	8002fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023fe:	2301      	movs	r3, #1
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002402:	f001 f981 	bl	8003708 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002406:	f000 fb8d 	bl	8002b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800240a:	f001 f94f 	bl	80036ac <vPortEnterCritical>
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002414:	b25b      	sxtb	r3, r3
 8002416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241a:	d103      	bne.n	8002424 <xQueueReceive+0x11c>
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800242a:	b25b      	sxtb	r3, r3
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d103      	bne.n	800243a <xQueueReceive+0x132>
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800243a:	f001 f965 	bl	8003708 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800243e:	1d3a      	adds	r2, r7, #4
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fdc4 	bl	8002fd4 <xTaskCheckForTimeOut>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d123      	bne.n	800249a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002454:	f000 f916 	bl	8002684 <prvIsQueueEmpty>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d017      	beq.n	800248e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	3324      	adds	r3, #36	; 0x24
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fd18 	bl	8002e9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800246c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800246e:	f000 f8b7 	bl	80025e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002472:	f000 fb65 	bl	8002b40 <xTaskResumeAll>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d189      	bne.n	8002390 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <xQueueReceive+0x1b4>)
 800247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	e780      	b.n	8002390 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800248e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002490:	f000 f8a6 	bl	80025e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002494:	f000 fb54 	bl	8002b40 <xTaskResumeAll>
 8002498:	e77a      	b.n	8002390 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800249a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800249c:	f000 f8a0 	bl	80025e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024a0:	f000 fb4e 	bl	8002b40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024a6:	f000 f8ed 	bl	8002684 <prvIsQueueEmpty>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f43f af6f 	beq.w	8002390 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3730      	adds	r7, #48	; 0x30
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	e000ed04 	.word	0xe000ed04

080024c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10d      	bne.n	80024fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d14d      	bne.n	8002582 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fece 	bl	800328c <xTaskPriorityDisinherit>
 80024f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e043      	b.n	8002582 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d119      	bne.n	8002534 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6858      	ldr	r0, [r3, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	461a      	mov	r2, r3
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	f001 fba4 	bl	8003c58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	441a      	add	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	d32b      	bcc.n	8002582 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	e026      	b.n	8002582 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68d8      	ldr	r0, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	461a      	mov	r2, r3
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	f001 fb8a 	bl	8003c58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	425b      	negs	r3, r3
 800254e:	441a      	add	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d207      	bcs.n	8002570 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	425b      	negs	r3, r3
 800256a:	441a      	add	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d105      	bne.n	8002582 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	3b01      	subs	r3, #1
 8002580:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800258a:	697b      	ldr	r3, [r7, #20]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d018      	beq.n	80025d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	441a      	add	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d303      	bcc.n	80025c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68d9      	ldr	r1, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	461a      	mov	r2, r3
 80025d2:	6838      	ldr	r0, [r7, #0]
 80025d4:	f001 fb40 	bl	8003c58 <memcpy>
	}
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025e8:	f001 f860 	bl	80036ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025f4:	e011      	b.n	800261a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d012      	beq.n	8002624 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3324      	adds	r3, #36	; 0x24
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fc6e 	bl	8002ee4 <xTaskRemoveFromEventList>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800260e:	f000 fd41 	bl	8003094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	3b01      	subs	r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	dce9      	bgt.n	80025f6 <prvUnlockQueue+0x16>
 8002622:	e000      	b.n	8002626 <prvUnlockQueue+0x46>
					break;
 8002624:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	22ff      	movs	r2, #255	; 0xff
 800262a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800262e:	f001 f86b 	bl	8003708 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002632:	f001 f83b 	bl	80036ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800263c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800263e:	e011      	b.n	8002664 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d012      	beq.n	800266e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3310      	adds	r3, #16
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fc49 	bl	8002ee4 <xTaskRemoveFromEventList>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002658:	f000 fd1c 	bl	8003094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800265c:	7bbb      	ldrb	r3, [r7, #14]
 800265e:	3b01      	subs	r3, #1
 8002660:	b2db      	uxtb	r3, r3
 8002662:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002668:	2b00      	cmp	r3, #0
 800266a:	dce9      	bgt.n	8002640 <prvUnlockQueue+0x60>
 800266c:	e000      	b.n	8002670 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800266e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	22ff      	movs	r2, #255	; 0xff
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002678:	f001 f846 	bl	8003708 <vPortExitCritical>
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800268c:	f001 f80e 	bl	80036ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002698:	2301      	movs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e001      	b.n	80026a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026a2:	f001 f831 	bl	8003708 <vPortExitCritical>

	return xReturn;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026b8:	f000 fff8 	bl	80036ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d102      	bne.n	80026ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	e001      	b.n	80026d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026d2:	f001 f819 	bl	8003708 <vPortExitCritical>

	return xReturn;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af04      	add	r7, sp, #16
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <xTaskCreateStatic+0x28>
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	623b      	str	r3, [r7, #32]
 8002706:	e7fe      	b.n	8002706 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <xTaskCreateStatic+0x42>
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	e7fe      	b.n	8002720 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002722:	2354      	movs	r3, #84	; 0x54
 8002724:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b54      	cmp	r3, #84	; 0x54
 800272a:	d009      	beq.n	8002740 <xTaskCreateStatic+0x60>
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e7fe      	b.n	800273e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002740:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01e      	beq.n	8002786 <xTaskCreateStatic+0xa6>
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01b      	beq.n	8002786 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002756:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002760:	2300      	movs	r3, #0
 8002762:	9303      	str	r3, [sp, #12]
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f850 	bl	800281e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800277e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002780:	f000 f8d4 	bl	800292c <prvAddNewTaskToReadyList>
 8002784:	e001      	b.n	800278a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800278a:	697b      	ldr	r3, [r7, #20]
	}
 800278c:	4618      	mov	r0, r3
 800278e:	3728      	adds	r7, #40	; 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af04      	add	r7, sp, #16
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f85b 	bl	8003864 <pvPortMalloc>
 80027ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00e      	beq.n	80027d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027b6:	2054      	movs	r0, #84	; 0x54
 80027b8:	f001 f854 	bl	8003864 <pvPortMalloc>
 80027bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ca:	e005      	b.n	80027d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027cc:	6978      	ldr	r0, [r7, #20]
 80027ce:	f001 f90b 	bl	80039e8 <vPortFree>
 80027d2:	e001      	b.n	80027d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d017      	beq.n	800280e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9303      	str	r3, [sp, #12]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f80e 	bl	800281e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002802:	69f8      	ldr	r0, [r7, #28]
 8002804:	f000 f892 	bl	800292c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002808:	2301      	movs	r3, #1
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	e002      	b.n	8002814 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002814:	69bb      	ldr	r3, [r7, #24]
	}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b088      	sub	sp, #32
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002836:	3b01      	subs	r3, #1
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f023 0307 	bic.w	r3, r3, #7
 8002844:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <prvInitialiseNewTask+0x46>
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e7fe      	b.n	8002862 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01f      	beq.n	80028aa <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	e012      	b.n	8002896 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	7819      	ldrb	r1, [r3, #0]
 8002878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	3334      	adds	r3, #52	; 0x34
 8002880:	460a      	mov	r2, r1
 8002882:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d9e9      	bls.n	8002870 <prvInitialiseNewTask+0x52>
 800289c:	e000      	b.n	80028a0 <prvInitialiseNewTask+0x82>
			{
				break;
 800289e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a8:	e003      	b.n	80028b2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d901      	bls.n	80028bc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028b8:	2306      	movs	r3, #6
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	2200      	movs	r2, #0
 80028cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	3304      	adds	r3, #4
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fac3 	bl	8001e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	3318      	adds	r3, #24
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fabe 	bl	8001e5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	f1c3 0207 	rsb	r2, r3, #7
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	2200      	movs	r2, #0
 80028fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	69b8      	ldr	r0, [r7, #24]
 800290c:	f000 fda8 	bl	8003460 <pxPortInitialiseStack>
 8002910:	4602      	mov	r2, r0
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002922:	bf00      	nop
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002934:	f000 feba 	bl	80036ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <prvAddNewTaskToReadyList+0xb8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <prvAddNewTaskToReadyList+0xb8>)
 8002940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002942:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <prvAddNewTaskToReadyList+0xbc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800294a:	4a27      	ldr	r2, [pc, #156]	; (80029e8 <prvAddNewTaskToReadyList+0xbc>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <prvAddNewTaskToReadyList+0xb8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d110      	bne.n	800297a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002958:	f000 fbc0 	bl	80030dc <prvInitialiseTaskLists>
 800295c:	e00d      	b.n	800297a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <prvAddNewTaskToReadyList+0xc0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <prvAddNewTaskToReadyList+0xbc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	429a      	cmp	r2, r3
 8002972:	d802      	bhi.n	800297a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002974:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <prvAddNewTaskToReadyList+0xbc>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <prvAddNewTaskToReadyList+0xc4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <prvAddNewTaskToReadyList+0xc4>)
 8002982:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <prvAddNewTaskToReadyList+0xc8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4313      	orrs	r3, r2
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <prvAddNewTaskToReadyList+0xc8>)
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <prvAddNewTaskToReadyList+0xcc>)
 80029a4:	441a      	add	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f7ff fa63 	bl	8001e78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029b2:	f000 fea9 	bl	8003708 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <prvAddNewTaskToReadyList+0xc0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00e      	beq.n	80029dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <prvAddNewTaskToReadyList+0xbc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <prvAddNewTaskToReadyList+0xd0>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000380 	.word	0x20000380
 80029e8:	20000280 	.word	0x20000280
 80029ec:	2000038c 	.word	0x2000038c
 80029f0:	2000039c 	.word	0x2000039c
 80029f4:	20000388 	.word	0x20000388
 80029f8:	20000284 	.word	0x20000284
 80029fc:	e000ed04 	.word	0xe000ed04

08002a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <vTaskDelay+0x60>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <vTaskDelay+0x2e>
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	e7fe      	b.n	8002a2c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002a2e:	f000 f879 	bl	8002b24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a32:	2100      	movs	r1, #0
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fcad 	bl	8003394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a3a:	f000 f881 	bl	8002b40 <xTaskResumeAll>
 8002a3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d107      	bne.n	8002a56 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <vTaskDelay+0x64>)
 8002a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200003a8 	.word	0x200003a8
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a76:	463a      	mov	r2, r7
 8002a78:	1d39      	adds	r1, r7, #4
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd36 	bl	80004f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	9202      	str	r2, [sp, #8]
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2300      	movs	r3, #0
 8002a94:	460a      	mov	r2, r1
 8002a96:	491d      	ldr	r1, [pc, #116]	; (8002b0c <vTaskStartScheduler+0xa4>)
 8002a98:	481d      	ldr	r0, [pc, #116]	; (8002b10 <vTaskStartScheduler+0xa8>)
 8002a9a:	f7ff fe21 	bl	80026e0 <xTaskCreateStatic>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <vTaskStartScheduler+0xac>)
 8002aa2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <vTaskStartScheduler+0xac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002aac:	2301      	movs	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	e001      	b.n	8002ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d115      	bne.n	8002ae8 <vTaskStartScheduler+0x80>
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <vTaskStartScheduler+0xb0>)
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <vTaskStartScheduler+0xb4>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <vTaskStartScheduler+0xb8>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ae2:	f000 fd45 	bl	8003570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ae6:	e00d      	b.n	8002b04 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d109      	bne.n	8002b04 <vTaskStartScheduler+0x9c>
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e7fe      	b.n	8002b02 <vTaskStartScheduler+0x9a>
}
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08003d10 	.word	0x08003d10
 8002b10:	080030ad 	.word	0x080030ad
 8002b14:	200003a4 	.word	0x200003a4
 8002b18:	200003a0 	.word	0x200003a0
 8002b1c:	2000038c 	.word	0x2000038c
 8002b20:	20000384 	.word	0x20000384

08002b24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <vTaskSuspendAll+0x18>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	4a03      	ldr	r2, [pc, #12]	; (8002b3c <vTaskSuspendAll+0x18>)
 8002b30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	200003a8 	.word	0x200003a8

08002b40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <xTaskResumeAll+0x114>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <xTaskResumeAll+0x2a>
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	e7fe      	b.n	8002b68 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b6a:	f000 fd9f 	bl	80036ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b6e:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <xTaskResumeAll+0x114>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	4a37      	ldr	r2, [pc, #220]	; (8002c54 <xTaskResumeAll+0x114>)
 8002b76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <xTaskResumeAll+0x114>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d161      	bne.n	8002c44 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <xTaskResumeAll+0x118>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05d      	beq.n	8002c44 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b88:	e02e      	b.n	8002be8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b8a:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <xTaskResumeAll+0x11c>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3318      	adds	r3, #24
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f9cb 	bl	8001f32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f9c6 	bl	8001f32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	2201      	movs	r2, #1
 8002bac:	409a      	lsls	r2, r3
 8002bae:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <xTaskResumeAll+0x120>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	4a2a      	ldr	r2, [pc, #168]	; (8002c60 <xTaskResumeAll+0x120>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <xTaskResumeAll+0x124>)
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f7ff f952 	bl	8001e78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <xTaskResumeAll+0x128>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <xTaskResumeAll+0x12c>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <xTaskResumeAll+0x11c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1cc      	bne.n	8002b8a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002bf6:	f000 fb0b 	bl	8003210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <xTaskResumeAll+0x130>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c06:	f000 f837 	bl	8002c78 <xTaskIncrementTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <xTaskResumeAll+0x12c>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f1      	bne.n	8002c06 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <xTaskResumeAll+0x130>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <xTaskResumeAll+0x12c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d009      	beq.n	8002c44 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <xTaskResumeAll+0x134>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c44:	f000 fd60 	bl	8003708 <vPortExitCritical>

	return xAlreadyYielded;
 8002c48:	68bb      	ldr	r3, [r7, #8]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200003a8 	.word	0x200003a8
 8002c58:	20000380 	.word	0x20000380
 8002c5c:	20000340 	.word	0x20000340
 8002c60:	20000388 	.word	0x20000388
 8002c64:	20000284 	.word	0x20000284
 8002c68:	20000280 	.word	0x20000280
 8002c6c:	20000394 	.word	0x20000394
 8002c70:	20000390 	.word	0x20000390
 8002c74:	e000ed04 	.word	0xe000ed04

08002c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <xTaskIncrementTick+0x144>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 8087 	bne.w	8002d9a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c8c:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <xTaskIncrementTick+0x148>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c94:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <xTaskIncrementTick+0x148>)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11f      	bne.n	8002ce0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ca0:	4b48      	ldr	r3, [pc, #288]	; (8002dc4 <xTaskIncrementTick+0x14c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <xTaskIncrementTick+0x46>
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	e7fe      	b.n	8002cbc <xTaskIncrementTick+0x44>
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <xTaskIncrementTick+0x14c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <xTaskIncrementTick+0x150>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3e      	ldr	r2, [pc, #248]	; (8002dc4 <xTaskIncrementTick+0x14c>)
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <xTaskIncrementTick+0x150>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <xTaskIncrementTick+0x154>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4a3c      	ldr	r2, [pc, #240]	; (8002dcc <xTaskIncrementTick+0x154>)
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	f000 fa98 	bl	8003210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ce0:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <xTaskIncrementTick+0x158>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d348      	bcc.n	8002d7c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <xTaskIncrementTick+0x14c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf4:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <xTaskIncrementTick+0x158>)
 8002cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfa:	601a      	str	r2, [r3, #0]
					break;
 8002cfc:	e03e      	b.n	8002d7c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <xTaskIncrementTick+0x14c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d203      	bcs.n	8002d1e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d16:	4a2e      	ldr	r2, [pc, #184]	; (8002dd0 <xTaskIncrementTick+0x158>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d1c:	e02e      	b.n	8002d7c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3304      	adds	r3, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff f905 	bl	8001f32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3318      	adds	r3, #24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f8fc 	bl	8001f32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	2201      	movs	r2, #1
 8002d40:	409a      	lsls	r2, r3
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <xTaskIncrementTick+0x15c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <xTaskIncrementTick+0x15c>)
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <xTaskIncrementTick+0x160>)
 8002d5a:	441a      	add	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f7ff f888 	bl	8001e78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <xTaskIncrementTick+0x164>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d3b9      	bcc.n	8002cea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002d76:	2301      	movs	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d7a:	e7b6      	b.n	8002cea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <xTaskIncrementTick+0x164>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d82:	4915      	ldr	r1, [pc, #84]	; (8002dd8 <xTaskIncrementTick+0x160>)
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d907      	bls.n	8002da4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002d94:	2301      	movs	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e004      	b.n	8002da4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <xTaskIncrementTick+0x168>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <xTaskIncrementTick+0x168>)
 8002da2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <xTaskIncrementTick+0x16c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002dac:	2301      	movs	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002db0:	697b      	ldr	r3, [r7, #20]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200003a8 	.word	0x200003a8
 8002dc0:	20000384 	.word	0x20000384
 8002dc4:	20000338 	.word	0x20000338
 8002dc8:	2000033c 	.word	0x2000033c
 8002dcc:	20000398 	.word	0x20000398
 8002dd0:	200003a0 	.word	0x200003a0
 8002dd4:	20000388 	.word	0x20000388
 8002dd8:	20000284 	.word	0x20000284
 8002ddc:	20000280 	.word	0x20000280
 8002de0:	20000390 	.word	0x20000390
 8002de4:	20000394 	.word	0x20000394

08002de8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <vTaskSwitchContext+0xa0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002df6:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <vTaskSwitchContext+0xa4>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002dfc:	e03e      	b.n	8002e7c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <vTaskSwitchContext+0xa4>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <vTaskSwitchContext+0xa8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	f1c3 031f 	rsb	r3, r3, #31
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	491e      	ldr	r1, [pc, #120]	; (8002e94 <vTaskSwitchContext+0xac>)
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	e7fe      	b.n	8002e40 <vTaskSwitchContext+0x58>
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <vTaskSwitchContext+0xac>)
 8002e4e:	4413      	add	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	3308      	adds	r3, #8
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d104      	bne.n	8002e72 <vTaskSwitchContext+0x8a>
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <vTaskSwitchContext+0xb0>)
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	200003a8 	.word	0x200003a8
 8002e8c:	20000394 	.word	0x20000394
 8002e90:	20000388 	.word	0x20000388
 8002e94:	20000284 	.word	0x20000284
 8002e98:	20000280 	.word	0x20000280

08002e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <vTaskPlaceOnEventList+0x24>
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e7fe      	b.n	8002ebe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <vTaskPlaceOnEventList+0x44>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3318      	adds	r3, #24
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fe fff9 	bl	8001ec0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ece:	2101      	movs	r1, #1
 8002ed0:	6838      	ldr	r0, [r7, #0]
 8002ed2:	f000 fa5f 	bl	8003394 <prvAddCurrentTaskToDelayedList>
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000280 	.word	0x20000280

08002ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <xTaskRemoveFromEventList+0x2a>
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e7fe      	b.n	8002f0c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	3318      	adds	r3, #24
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f80d 	bl	8001f32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <xTaskRemoveFromEventList+0xac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11c      	bne.n	8002f5a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff f804 	bl	8001f32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	2201      	movs	r2, #1
 8002f30:	409a      	lsls	r2, r3
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <xTaskRemoveFromEventList+0xb0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <xTaskRemoveFromEventList+0xb0>)
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <xTaskRemoveFromEventList+0xb4>)
 8002f4a:	441a      	add	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7fe ff90 	bl	8001e78 <vListInsertEnd>
 8002f58:	e005      	b.n	8002f66 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	3318      	adds	r3, #24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480e      	ldr	r0, [pc, #56]	; (8002f9c <xTaskRemoveFromEventList+0xb8>)
 8002f62:	f7fe ff89 	bl	8001e78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <xTaskRemoveFromEventList+0xbc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d905      	bls.n	8002f80 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <xTaskRemoveFromEventList+0xc0>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e001      	b.n	8002f84 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f84:	697b      	ldr	r3, [r7, #20]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200003a8 	.word	0x200003a8
 8002f94:	20000388 	.word	0x20000388
 8002f98:	20000284 	.word	0x20000284
 8002f9c:	20000340 	.word	0x20000340
 8002fa0:	20000280 	.word	0x20000280
 8002fa4:	20000394 	.word	0x20000394

08002fa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <vTaskInternalSetTimeOutState+0x24>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <vTaskInternalSetTimeOutState+0x28>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	20000398 	.word	0x20000398
 8002fd0:	20000384 	.word	0x20000384

08002fd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <xTaskCheckForTimeOut+0x24>
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e7fe      	b.n	8002ff6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <xTaskCheckForTimeOut+0x3e>
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e7fe      	b.n	8003010 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003012:	f000 fb4b 	bl	80036ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003016:	4b1d      	ldr	r3, [pc, #116]	; (800308c <xTaskCheckForTimeOut+0xb8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d102      	bne.n	8003036 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	e023      	b.n	800307e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <xTaskCheckForTimeOut+0xbc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d007      	beq.n	8003052 <xTaskCheckForTimeOut+0x7e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800304c:	2301      	movs	r3, #1
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e015      	b.n	800307e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	429a      	cmp	r2, r3
 800305a:	d20b      	bcs.n	8003074 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	1ad2      	subs	r2, r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff9d 	bl	8002fa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e004      	b.n	800307e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800307a:	2301      	movs	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800307e:	f000 fb43 	bl	8003708 <vPortExitCritical>

	return xReturn;
 8003082:	69fb      	ldr	r3, [r7, #28]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000384 	.word	0x20000384
 8003090:	20000398 	.word	0x20000398

08003094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <vTaskMissedYield+0x14>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]
}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20000394 	.word	0x20000394

080030ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030b4:	f000 f852 	bl	800315c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <prvIdleTask+0x28>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d9f9      	bls.n	80030b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <prvIdleTask+0x2c>)
 80030c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030d0:	e7f0      	b.n	80030b4 <prvIdleTask+0x8>
 80030d2:	bf00      	nop
 80030d4:	20000284 	.word	0x20000284
 80030d8:	e000ed04 	.word	0xe000ed04

080030dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	e00c      	b.n	8003102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <prvInitialiseTaskLists+0x60>)
 80030f4:	4413      	add	r3, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fe91 	bl	8001e1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3301      	adds	r3, #1
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b06      	cmp	r3, #6
 8003106:	d9ef      	bls.n	80030e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <prvInitialiseTaskLists+0x64>)
 800310a:	f7fe fe88 	bl	8001e1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800310e:	480d      	ldr	r0, [pc, #52]	; (8003144 <prvInitialiseTaskLists+0x68>)
 8003110:	f7fe fe85 	bl	8001e1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003114:	480c      	ldr	r0, [pc, #48]	; (8003148 <prvInitialiseTaskLists+0x6c>)
 8003116:	f7fe fe82 	bl	8001e1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800311a:	480c      	ldr	r0, [pc, #48]	; (800314c <prvInitialiseTaskLists+0x70>)
 800311c:	f7fe fe7f 	bl	8001e1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003120:	480b      	ldr	r0, [pc, #44]	; (8003150 <prvInitialiseTaskLists+0x74>)
 8003122:	f7fe fe7c 	bl	8001e1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <prvInitialiseTaskLists+0x78>)
 8003128:	4a05      	ldr	r2, [pc, #20]	; (8003140 <prvInitialiseTaskLists+0x64>)
 800312a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <prvInitialiseTaskLists+0x7c>)
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <prvInitialiseTaskLists+0x68>)
 8003130:	601a      	str	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000284 	.word	0x20000284
 8003140:	20000310 	.word	0x20000310
 8003144:	20000324 	.word	0x20000324
 8003148:	20000340 	.word	0x20000340
 800314c:	20000354 	.word	0x20000354
 8003150:	2000036c 	.word	0x2000036c
 8003154:	20000338 	.word	0x20000338
 8003158:	2000033c 	.word	0x2000033c

0800315c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003162:	e019      	b.n	8003198 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003164:	f000 faa2 	bl	80036ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <prvCheckTasksWaitingTermination+0x4c>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe fedc 	bl	8001f32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <prvCheckTasksWaitingTermination+0x50>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3b01      	subs	r3, #1
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <prvCheckTasksWaitingTermination+0x50>)
 8003182:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <prvCheckTasksWaitingTermination+0x54>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3b01      	subs	r3, #1
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <prvCheckTasksWaitingTermination+0x54>)
 800318c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800318e:	f000 fabb 	bl	8003708 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f80e 	bl	80031b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <prvCheckTasksWaitingTermination+0x54>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e1      	bne.n	8003164 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000354 	.word	0x20000354
 80031ac:	20000380 	.word	0x20000380
 80031b0:	20000368 	.word	0x20000368

080031b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fc0c 	bl	80039e8 <vPortFree>
				vPortFree( pxTCB );
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fc09 	bl	80039e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031d6:	e017      	b.n	8003208 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d103      	bne.n	80031ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fc00 	bl	80039e8 <vPortFree>
	}
 80031e8:	e00e      	b.n	8003208 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d009      	beq.n	8003208 <prvDeleteTCB+0x54>
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e7fe      	b.n	8003206 <prvDeleteTCB+0x52>
	}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <prvResetNextTaskUnblockTime+0x38>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <prvResetNextTaskUnblockTime+0x3c>)
 8003222:	f04f 32ff 	mov.w	r2, #4294967295
 8003226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003228:	e008      	b.n	800323c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <prvResetNextTaskUnblockTime+0x38>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a04      	ldr	r2, [pc, #16]	; (800324c <prvResetNextTaskUnblockTime+0x3c>)
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000338 	.word	0x20000338
 800324c:	200003a0 	.word	0x200003a0

08003250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <xTaskGetSchedulerState+0x34>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800325e:	2301      	movs	r3, #1
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	e008      	b.n	8003276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <xTaskGetSchedulerState+0x38>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800326c:	2302      	movs	r3, #2
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	e001      	b.n	8003276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003276:	687b      	ldr	r3, [r7, #4]
	}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	2000038c 	.word	0x2000038c
 8003288:	200003a8 	.word	0x200003a8

0800328c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d06c      	beq.n	800337c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <xTaskPriorityDisinherit+0xfc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d009      	beq.n	80032c0 <xTaskPriorityDisinherit+0x34>
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e7fe      	b.n	80032be <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <xTaskPriorityDisinherit+0x50>
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	e7fe      	b.n	80032da <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d044      	beq.n	800337c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d140      	bne.n	800337c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fe17 	bl	8001f32 <uxListRemove>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d115      	bne.n	8003336 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330e:	491f      	ldr	r1, [pc, #124]	; (800338c <xTaskPriorityDisinherit+0x100>)
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <xTaskPriorityDisinherit+0xaa>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	2201      	movs	r2, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <xTaskPriorityDisinherit+0x104>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4013      	ands	r3, r2
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <xTaskPriorityDisinherit+0x104>)
 8003334:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f1c3 0207 	rsb	r2, r3, #7
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	2201      	movs	r2, #1
 8003350:	409a      	lsls	r2, r3
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <xTaskPriorityDisinherit+0x104>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <xTaskPriorityDisinherit+0x104>)
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4a08      	ldr	r2, [pc, #32]	; (800338c <xTaskPriorityDisinherit+0x100>)
 800336a:	441a      	add	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f7fe fd80 	bl	8001e78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800337c:	697b      	ldr	r3, [r7, #20]
	}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000280 	.word	0x20000280
 800338c:	20000284 	.word	0x20000284
 8003390:	20000388 	.word	0x20000388

08003394 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800339e:	4b29      	ldr	r3, [pc, #164]	; (8003444 <prvAddCurrentTaskToDelayedList+0xb0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fdc1 	bl	8001f32 <uxListRemove>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	2201      	movs	r2, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <prvAddCurrentTaskToDelayedList+0xb8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4013      	ands	r3, r2
 80033ca:	4a20      	ldr	r2, [pc, #128]	; (800344c <prvAddCurrentTaskToDelayedList+0xb8>)
 80033cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d10a      	bne.n	80033ec <prvAddCurrentTaskToDelayedList+0x58>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033dc:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4619      	mov	r1, r3
 80033e4:	481a      	ldr	r0, [pc, #104]	; (8003450 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033e6:	f7fe fd47 	bl	8001e78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033ea:	e026      	b.n	800343a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	429a      	cmp	r2, r3
 8003402:	d209      	bcs.n	8003418 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003404:	4b13      	ldr	r3, [pc, #76]	; (8003454 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3304      	adds	r3, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f7fe fd55 	bl	8001ec0 <vListInsert>
}
 8003416:	e010      	b.n	800343a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <prvAddCurrentTaskToDelayedList+0xc4>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <prvAddCurrentTaskToDelayedList+0xb4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3304      	adds	r3, #4
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7fe fd4b 	bl	8001ec0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <prvAddCurrentTaskToDelayedList+0xc8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d202      	bcs.n	800343a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6013      	str	r3, [r2, #0]
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000384 	.word	0x20000384
 8003448:	20000280 	.word	0x20000280
 800344c:	20000388 	.word	0x20000388
 8003450:	2000036c 	.word	0x2000036c
 8003454:	2000033c 	.word	0x2000033c
 8003458:	20000338 	.word	0x20000338
 800345c:	200003a0 	.word	0x200003a0

08003460 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3b04      	subs	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003478:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3b04      	subs	r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f023 0201 	bic.w	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3b04      	subs	r3, #4
 800348e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003490:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <pxPortInitialiseStack+0x64>)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3b14      	subs	r3, #20
 800349a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b04      	subs	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f06f 0202 	mvn.w	r2, #2
 80034ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3b20      	subs	r3, #32
 80034b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	080034c9 	.word	0x080034c9

080034c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <prvTaskExitError+0x50>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d009      	beq.n	80034f0 <prvTaskExitError+0x28>
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e7fe      	b.n	80034ee <prvTaskExitError+0x26>
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003502:	bf00      	nop
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0fc      	beq.n	8003504 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	2000000c 	.word	0x2000000c
 800351c:	00000000 	.word	0x00000000

08003520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <pxCurrentTCBConst2>)
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	6808      	ldr	r0, [r1, #0]
 8003526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352a:	f380 8809 	msr	PSP, r0
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8811 	msr	BASEPRI, r0
 800353a:	4770      	bx	lr
 800353c:	f3af 8000 	nop.w

08003540 <pxCurrentTCBConst2>:
 8003540:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop

08003548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003548:	4808      	ldr	r0, [pc, #32]	; (800356c <prvPortStartFirstTask+0x24>)
 800354a:	6800      	ldr	r0, [r0, #0]
 800354c:	6800      	ldr	r0, [r0, #0]
 800354e:	f380 8808 	msr	MSP, r0
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8814 	msr	CONTROL, r0
 800355a:	b662      	cpsie	i
 800355c:	b661      	cpsie	f
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	df00      	svc	0
 8003568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800356a:	bf00      	nop
 800356c:	e000ed08 	.word	0xe000ed08

08003570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003576:	4b44      	ldr	r3, [pc, #272]	; (8003688 <xPortStartScheduler+0x118>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a44      	ldr	r2, [pc, #272]	; (800368c <xPortStartScheduler+0x11c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d109      	bne.n	8003594 <xPortStartScheduler+0x24>
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e7fe      	b.n	8003592 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003594:	4b3c      	ldr	r3, [pc, #240]	; (8003688 <xPortStartScheduler+0x118>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a3d      	ldr	r2, [pc, #244]	; (8003690 <xPortStartScheduler+0x120>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d109      	bne.n	80035b2 <xPortStartScheduler+0x42>
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e7fe      	b.n	80035b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035b2:	4b38      	ldr	r3, [pc, #224]	; (8003694 <xPortStartScheduler+0x124>)
 80035b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b30      	ldr	r3, [pc, #192]	; (8003698 <xPortStartScheduler+0x128>)
 80035d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035da:	4b30      	ldr	r3, [pc, #192]	; (800369c <xPortStartScheduler+0x12c>)
 80035dc:	2207      	movs	r2, #7
 80035de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035e0:	e009      	b.n	80035f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <xPortStartScheduler+0x12c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	4a2c      	ldr	r2, [pc, #176]	; (800369c <xPortStartScheduler+0x12c>)
 80035ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d0ef      	beq.n	80035e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <xPortStartScheduler+0x12c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1c3 0307 	rsb	r3, r3, #7
 800360a:	2b04      	cmp	r3, #4
 800360c:	d009      	beq.n	8003622 <xPortStartScheduler+0xb2>
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	e7fe      	b.n	8003620 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <xPortStartScheduler+0x12c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	4a1c      	ldr	r2, [pc, #112]	; (800369c <xPortStartScheduler+0x12c>)
 800362a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <xPortStartScheduler+0x12c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003634:	4a19      	ldr	r2, [pc, #100]	; (800369c <xPortStartScheduler+0x12c>)
 8003636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <xPortStartScheduler+0x130>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <xPortStartScheduler+0x130>)
 8003646:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800364a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <xPortStartScheduler+0x130>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <xPortStartScheduler+0x130>)
 8003652:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003658:	f000 f8d6 	bl	8003808 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <xPortStartScheduler+0x134>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003662:	f000 f8f5 	bl	8003850 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <xPortStartScheduler+0x138>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <xPortStartScheduler+0x138>)
 800366c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003670:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003672:	f7ff ff69 	bl	8003548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003676:	f7ff fbb7 	bl	8002de8 <vTaskSwitchContext>
	prvTaskExitError();
 800367a:	f7ff ff25 	bl	80034c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	e000ed00 	.word	0xe000ed00
 800368c:	410fc271 	.word	0x410fc271
 8003690:	410fc270 	.word	0x410fc270
 8003694:	e000e400 	.word	0xe000e400
 8003698:	200003ac 	.word	0x200003ac
 800369c:	200003b0 	.word	0x200003b0
 80036a0:	e000ed20 	.word	0xe000ed20
 80036a4:	2000000c 	.word	0x2000000c
 80036a8:	e000ef34 	.word	0xe000ef34

080036ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <vPortEnterCritical+0x54>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <vPortEnterCritical+0x54>)
 80036cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <vPortEnterCritical+0x54>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10e      	bne.n	80036f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036d6:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <vPortEnterCritical+0x58>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <vPortEnterCritical+0x48>
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	e7fe      	b.n	80036f2 <vPortEnterCritical+0x46>
	}
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	2000000c 	.word	0x2000000c
 8003704:	e000ed04 	.word	0xe000ed04

08003708 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <vPortExitCritical+0x4c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <vPortExitCritical+0x22>
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	607b      	str	r3, [r7, #4]
 8003728:	e7fe      	b.n	8003728 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <vPortExitCritical+0x4c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3b01      	subs	r3, #1
 8003730:	4a08      	ldr	r2, [pc, #32]	; (8003754 <vPortExitCritical+0x4c>)
 8003732:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <vPortExitCritical+0x4c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <vPortExitCritical+0x3e>
 800373c:	2300      	movs	r3, #0
 800373e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	2000000c 	.word	0x2000000c
	...

08003760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003760:	f3ef 8009 	mrs	r0, PSP
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <pxCurrentTCBConst>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	f01e 0f10 	tst.w	lr, #16
 8003770:	bf08      	it	eq
 8003772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377a:	6010      	str	r0, [r2, #0]
 800377c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003784:	f380 8811 	msr	BASEPRI, r0
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f7ff fb2a 	bl	8002de8 <vTaskSwitchContext>
 8003794:	f04f 0000 	mov.w	r0, #0
 8003798:	f380 8811 	msr	BASEPRI, r0
 800379c:	bc09      	pop	{r0, r3}
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	6808      	ldr	r0, [r1, #0]
 80037a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a6:	f01e 0f10 	tst.w	lr, #16
 80037aa:	bf08      	it	eq
 80037ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037b0:	f380 8809 	msr	PSP, r0
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	f3af 8000 	nop.w

080037c0 <pxCurrentTCBConst>:
 80037c0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop

080037c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037e0:	f7ff fa4a 	bl	8002c78 <xTaskIncrementTick>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <SysTick_Handler+0x3c>)
 80037ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	2300      	movs	r3, #0
 80037f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	e000ed04 	.word	0xe000ed04

08003808 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <vPortSetupTimerInterrupt+0x34>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <vPortSetupTimerInterrupt+0x38>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <vPortSetupTimerInterrupt+0x3c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <vPortSetupTimerInterrupt+0x40>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <vPortSetupTimerInterrupt+0x44>)
 8003826:	3b01      	subs	r3, #1
 8003828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <vPortSetupTimerInterrupt+0x34>)
 800382c:	2207      	movs	r2, #7
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e010 	.word	0xe000e010
 8003840:	e000e018 	.word	0xe000e018
 8003844:	20000000 	.word	0x20000000
 8003848:	10624dd3 	.word	0x10624dd3
 800384c:	e000e014 	.word	0xe000e014

08003850 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003850:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003860 <vPortEnableVFP+0x10>
 8003854:	6801      	ldr	r1, [r0, #0]
 8003856:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800385a:	6001      	str	r1, [r0, #0]
 800385c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800385e:	bf00      	nop
 8003860:	e000ed88 	.word	0xe000ed88

08003864 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003870:	f7ff f958 	bl	8002b24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003874:	4b57      	ldr	r3, [pc, #348]	; (80039d4 <pvPortMalloc+0x170>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800387c:	f000 f90c 	bl	8003a98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003880:	4b55      	ldr	r3, [pc, #340]	; (80039d8 <pvPortMalloc+0x174>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 808c 	bne.w	80039a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01c      	beq.n	80038ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003894:	2208      	movs	r2, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d013      	beq.n	80038ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f023 0307 	bic.w	r3, r3, #7
 80038ac:	3308      	adds	r3, #8
 80038ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <pvPortMalloc+0x6a>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e7fe      	b.n	80038cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d068      	beq.n	80039a6 <pvPortMalloc+0x142>
 80038d4:	4b41      	ldr	r3, [pc, #260]	; (80039dc <pvPortMalloc+0x178>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d863      	bhi.n	80039a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038de:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <pvPortMalloc+0x17c>)
 80038e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038e2:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <pvPortMalloc+0x17c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038e8:	e004      	b.n	80038f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d903      	bls.n	8003906 <pvPortMalloc+0xa2>
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f1      	bne.n	80038ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003906:	4b33      	ldr	r3, [pc, #204]	; (80039d4 <pvPortMalloc+0x170>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	429a      	cmp	r2, r3
 800390e:	d04a      	beq.n	80039a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2208      	movs	r2, #8
 8003916:	4413      	add	r3, r2
 8003918:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	1ad2      	subs	r2, r2, r3
 800392a:	2308      	movs	r3, #8
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	429a      	cmp	r2, r3
 8003930:	d91e      	bls.n	8003970 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <pvPortMalloc+0xf4>
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e7fe      	b.n	8003956 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800396a:	69b8      	ldr	r0, [r7, #24]
 800396c:	f000 f8f6 	bl	8003b5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <pvPortMalloc+0x178>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <pvPortMalloc+0x178>)
 800397c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <pvPortMalloc+0x178>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <pvPortMalloc+0x180>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d203      	bcs.n	8003992 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <pvPortMalloc+0x178>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <pvPortMalloc+0x180>)
 8003990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <pvPortMalloc+0x174>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	431a      	orrs	r2, r3
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039a6:	f7ff f8cb 	bl	8002b40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d009      	beq.n	80039c8 <pvPortMalloc+0x164>
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e7fe      	b.n	80039c6 <pvPortMalloc+0x162>
	return pvReturn;
 80039c8:	69fb      	ldr	r3, [r7, #28]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3728      	adds	r7, #40	; 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20003fbc 	.word	0x20003fbc
 80039d8:	20003fc8 	.word	0x20003fc8
 80039dc:	20003fc0 	.word	0x20003fc0
 80039e0:	20003fb4 	.word	0x20003fb4
 80039e4:	20003fc4 	.word	0x20003fc4

080039e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d046      	beq.n	8003a88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039fa:	2308      	movs	r3, #8
 80039fc:	425b      	negs	r3, r3
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4413      	add	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <vPortFree+0xa8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <vPortFree+0x42>
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e7fe      	b.n	8003a28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <vPortFree+0x5e>
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	e7fe      	b.n	8003a44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <vPortFree+0xa8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d019      	beq.n	8003a88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d115      	bne.n	8003a88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <vPortFree+0xa8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a6c:	f7ff f85a 	bl	8002b24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <vPortFree+0xac>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4413      	add	r3, r2
 8003a7a:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <vPortFree+0xac>)
 8003a7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a7e:	6938      	ldr	r0, [r7, #16]
 8003a80:	f000 f86c 	bl	8003b5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a84:	f7ff f85c 	bl	8002b40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20003fc8 	.word	0x20003fc8
 8003a94:	20003fc0 	.word	0x20003fc0

08003a98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003aa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <prvHeapInit+0xac>)
 8003aa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3307      	adds	r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0307 	bic.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <prvHeapInit+0xac>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ad0:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <prvHeapInit+0xb0>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ad6:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <prvHeapInit+0xb0>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0307 	bic.w	r3, r3, #7
 8003af2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <prvHeapInit+0xb4>)
 8003af8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <prvHeapInit+0xb4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <prvHeapInit+0xb4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	1ad2      	subs	r2, r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <prvHeapInit+0xb4>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <prvHeapInit+0xb8>)
 8003b26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <prvHeapInit+0xbc>)
 8003b2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <prvHeapInit+0xc0>)
 8003b32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b36:	601a      	str	r2, [r3, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	200003b4 	.word	0x200003b4
 8003b48:	20003fb4 	.word	0x20003fb4
 8003b4c:	20003fbc 	.word	0x20003fbc
 8003b50:	20003fc4 	.word	0x20003fc4
 8003b54:	20003fc0 	.word	0x20003fc0
 8003b58:	20003fc8 	.word	0x20003fc8

08003b5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b64:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <prvInsertBlockIntoFreeList+0xac>)
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e002      	b.n	8003b70 <prvInsertBlockIntoFreeList+0x14>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d8f7      	bhi.n	8003b6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4413      	add	r3, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d108      	bne.n	8003b9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	441a      	add	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d118      	bne.n	8003be4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <prvInsertBlockIntoFreeList+0xb0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d00d      	beq.n	8003bda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	441a      	add	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e008      	b.n	8003bec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <prvInsertBlockIntoFreeList+0xb0>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e003      	b.n	8003bec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d002      	beq.n	8003bfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20003fb4 	.word	0x20003fb4
 8003c0c:	20003fbc 	.word	0x20003fbc

08003c10 <__libc_init_array>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	4e0d      	ldr	r6, [pc, #52]	; (8003c48 <__libc_init_array+0x38>)
 8003c14:	4c0d      	ldr	r4, [pc, #52]	; (8003c4c <__libc_init_array+0x3c>)
 8003c16:	1ba4      	subs	r4, r4, r6
 8003c18:	10a4      	asrs	r4, r4, #2
 8003c1a:	2500      	movs	r5, #0
 8003c1c:	42a5      	cmp	r5, r4
 8003c1e:	d109      	bne.n	8003c34 <__libc_init_array+0x24>
 8003c20:	4e0b      	ldr	r6, [pc, #44]	; (8003c50 <__libc_init_array+0x40>)
 8003c22:	4c0c      	ldr	r4, [pc, #48]	; (8003c54 <__libc_init_array+0x44>)
 8003c24:	f000 f82c 	bl	8003c80 <_init>
 8003c28:	1ba4      	subs	r4, r4, r6
 8003c2a:	10a4      	asrs	r4, r4, #2
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	42a5      	cmp	r5, r4
 8003c30:	d105      	bne.n	8003c3e <__libc_init_array+0x2e>
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c38:	4798      	blx	r3
 8003c3a:	3501      	adds	r5, #1
 8003c3c:	e7ee      	b.n	8003c1c <__libc_init_array+0xc>
 8003c3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c42:	4798      	blx	r3
 8003c44:	3501      	adds	r5, #1
 8003c46:	e7f2      	b.n	8003c2e <__libc_init_array+0x1e>
 8003c48:	08003d38 	.word	0x08003d38
 8003c4c:	08003d38 	.word	0x08003d38
 8003c50:	08003d38 	.word	0x08003d38
 8003c54:	08003d3c 	.word	0x08003d3c

08003c58 <memcpy>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	1e43      	subs	r3, r0, #1
 8003c5c:	440a      	add	r2, r1
 8003c5e:	4291      	cmp	r1, r2
 8003c60:	d100      	bne.n	8003c64 <memcpy+0xc>
 8003c62:	bd10      	pop	{r4, pc}
 8003c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6c:	e7f7      	b.n	8003c5e <memcpy+0x6>

08003c6e <memset>:
 8003c6e:	4402      	add	r2, r0
 8003c70:	4603      	mov	r3, r0
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d100      	bne.n	8003c78 <memset+0xa>
 8003c76:	4770      	bx	lr
 8003c78:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7c:	e7f9      	b.n	8003c72 <memset+0x4>
	...

08003c80 <_init>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	bf00      	nop
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr

08003c8c <_fini>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr
